// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Role {
  id            String  @id @default(uuid())
  name          String  @unique
  users         User[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model User {
  id                    String  @id @default(uuid())
  first_name            String
  last_name             String
  email                 String  @unique
  phone                 String?
  verified_email_at     DateTime?
  role_id               String
  role                  Role    @relation(fields: [role_id], references: [id])
  courses               UserCourse[]
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

model Category {
  id            String  @id @default(uuid())
  name          String  @unique
  courses       Course[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Modality {
  id            String  @id @default(uuid())
  name          String  @unique
  courses       Course[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Course {
  id            String  @id @default(uuid())
  name          String
  category_id   String
  category      Category @relation(fields: [category_id], references: [id])
  modality_id   String
  modality      Modality @relation(fields: [modality_id], references: [id])
  duration      Int
  quota         Int
  users         UserCourse[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model InscriptionStatus {
  id            String  @id @default(uuid())
  name          String  @unique
  user_courses  UserCourse[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model UserCourse {
  user_id                 String
  user                    User    @relation(fields: [user_id], references: [id])
  course_id               String
  course                  Course  @relation(fields: [course_id], references: [id])
  inscription_status_id   String
  inscription_status      InscriptionStatus @relation(fields: [inscription_status_id], references: [id])
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  @@id([user_id, course_id])
}